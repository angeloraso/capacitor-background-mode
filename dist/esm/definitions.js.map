{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle, PermissionState } from \"@capacitor/core\";\n\nexport interface PermissionStatus {\n  display: PermissionState;\n}\nexport interface ISettings {\n  title: string;\n  text: string;\n  subText: string;\n  bigText: boolean;\n  resume: boolean;\n  silent: boolean;\n  hidden: boolean;\n  color: string;\n  icon: string;\n  channelName: string;\n  channelDescription: string;\n  allowClose: boolean;\n  closeIcon: string;\n  closeTitle: string;\n  showWhen: boolean;\n  disableWebViewOptimization: boolean;\n  visibility: 'public' | 'private' | 'secret';\n}\nexport interface BackgroundModePlugin {\n  enable(): Promise<void>;\n  disable(): Promise<void>;\n  getSettings(): Promise<{settings: ISettings}>;\n  setSettings(settings: Partial<ISettings>): Promise<void>;\n  checkForegroundPermission(): Promise<PermissionStatus>;\n  requestForegroundPermission(): Promise<PermissionStatus>;\n  checkNotificationsPermission(): Promise<PermissionStatus>;\n  requestNotificationsPermission(): Promise<PermissionStatus>;\n  checkBatteryOptimizations(): Promise<{disabled: boolean}>;\n  requestDisableBatteryOptimizations(): Promise<{disabled: boolean}>;\n  enableWebViewOptimizations(): Promise<void>;\n  disableWebViewOptimizations(): Promise<void>;\n  moveToBackground(): Promise<void>;\n  moveToForeground(): Promise<void>;\n  isScreenOff(): Promise<{isScreenOff: boolean}>;\n  isEnabled(): Promise<{enabled: boolean}>;\n  isActive(): Promise<{activated: boolean}>;\n  wakeUp(): Promise<void>;\n  unlock(): Promise<void>;\n\n  addListener(\n    eventName: 'appInBackground',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle>;\n  addListener(\n    eventName: 'appInForeground',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle>;\n  removeAllListeners(): Promise<void>;\n}"]}